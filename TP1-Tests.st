TestCase subclass: #AlgoRemisTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoRemisTest methodsFor: 'running'!setUp	precision := 0.001! !!AlgoRemisTest methodsFor: 'tests'!test06ViajeAHospitalRecibeUnDescuentoAdicional	| algoRemis viaje valorEsperadoConHospital |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis registrarChoferDeAuto: 'Santi' conTarifaInicial: 350.	algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: 10 peajes: 1.		viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospital Tres Arcos'.		valorEsperadoConHospital := 0.2 * (350 "tarifa inicial" + (10 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje")).	self assert: 'Santi' equals: (viaje chofer).	self assert: valorEsperadoConHospital closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests'!test02AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 450 "tarifa inicial" + (15 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje").	self assert: 'Pablo' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 13:41'!testAlumno04ChoferElectricoConMayorTarifaQueChoferNormalTerminaSiendoElElegidoHaciaHospitalConDescuento	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAuto: 'Tomas' conTarifaInicial: 300.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.		algoRemis crearViajeConDestino: 'Hospital Feliz' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospital Feliz'.	valorEsperado := 0.2*(400 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje")).	self assert: 'Seba' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/14/2021 23:45'!testAlumno07ChoferSeRegistraLuegoDeCrearViajeYEsMasBaratoEsElegido	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis registrarChoferDeAutoElectrico: 'Miguel' conTarifaInicial: 6500.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	algoRemis registrarChoferDeAutoElectrico: 'Fernando' conTarifaInicial: 20.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 20 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Fernando' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/13/2021 16:55'!testAlumno02ChoferMasBaratoDeTresChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis registrarChoferDeAutoElectrico: 'Miguel' conTarifaInicial: 6500.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 450 "tarifa inicial" + (15 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje").	self assert: 'Pablo' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests'!test01ViajeDeChoferDeAutoOfreceElPrecioMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.	viaje := algoRemis viajeMasBaratoParaDestino: 'Parque La Costa'.	valorEsperado := 500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje").	self assert: 'Diego' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests'!test03ViajeDeChoferDeAutoElectricoHaciaFIUBAOfreceElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests'!test04AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.		algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Segurola y Habana 4310, septimo piso'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 13:33'!testAlumno01UnicoChoferEsSeleccionadoParaViaje	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Thor' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'Asgard' aKms: 2003 peajes: 9.	viaje := algoRemis viajeMasBaratoParaDestino: 'Asgard'.	valorEsperado := 200 "tarifa inicial" + (2003"km" * 50 "precio/km")+ (9 "peajes" * 100 "tarifa peaje").	self assert: 'Thor' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests'!test05ViajeACiudadUniversitariaConAutoElectricoSaleMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAuto: 'Nico' conTarifaInicial: 250.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.	algoRemis crearViajeConDestino: 'Ciudad Universitaria' aKms: 25 peajes: 2.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Ciudad Universitaria'.	valorEsperado := 400 "tarifa inicial" + (25 "km" * 30 "precio/km") + (2 "peajes" * 50 "tarifa peaje").	self assert: 'Seba' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 13:38'!testAlumno03ChoferElectricoConMayorTarifaQueChoferNormalTerminaSiendoElElegido	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAuto: 'Tomas' conTarifaInicial: 300.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.		algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Segurola y Habana 4310, septimo piso'.	valorEsperado := 400 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Seba' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/13/2021 17:12'!testAlumno05ViajeAShoppingNoOfreceDescuento	| algoRemis viaje valorEsperado valorSiHubieraDescuento|	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Shopping Dot' aKms: 2 peajes: 0.	viaje := algoRemis viajeMasBaratoParaDestino: 'Shopping Dot'.	valorEsperado := 500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje").	valorSiHubieraDescuento := 0.2*(500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje")).	self assert: 'Diego' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.	self deny: valorSiHubieraDescuento closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'gonza 10/14/2021 17:28'!testAlumno06ViajeSinPeajesEsCorrecto	| algoRemis viaje valorEsperado valorSiHubieraDescuento|	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Mi casa' aKms: 2 peajes: 0.	viaje := algoRemis viajeMasBaratoParaDestino: 'Mi casa'.	valorEsperado := 500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje").	self assert: 'Diego' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !TestCase subclass: #CantKmsNegativaTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!CantKmsNegativaTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 16:27'!testAlumno01CrearViajeConKmsNegativosLanzaError	| algoRemis |	algoRemis := AlgoRemis new.self should: [algoRemis crearViajeConDestino: 'Recoleta' aKms:  -1 peajes: 60] raise: CantKmsNegativa  .! !TestCase subclass: #CantPeajesNegativaTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!CantPeajesNegativaTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 16:27'!testAlumno01CrearViajeConPeajesNegativosLanzaError	| algoRemis |	algoRemis := AlgoRemis new.self should: [algoRemis crearViajeConDestino: 'Recoleta' aKms:  10 peajes: -10] raise: CantPeajesNegativa  .! !TestCase subclass: #ChoferTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!ChoferTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 14:16'!testAlumno02Presupuesto11km1PeajeChoferElectrico|  chofer valorEsperado|chofer := Chofer nuevoChoferAutoElectrico: 'Diego' conTarifaInicial: 500.valorEsperado := 500 "tarifa inicial" + (11 "km" * 30 "precio/km")+ (1"peajes" * 50 "tarifa peaje").self assert: valorEsperado closeTo: (chofer presupuestoPorKM: 11 Peajes: 1) precision: precision.! !!ChoferTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 14:15'!testAlumno01Presupuesto11km1PeajeChoferRegular|  chofer valorEsperado|chofer := Chofer nuevoChoferAutoRegular: 'Diego' conTarifaInicial: 500.valorEsperado := 500 "tarifa inicial" + (11 "km" * 50 "precio/km")+ (1"peajes" * 100 "tarifa peaje").self assert: valorEsperado closeTo: (chofer presupuestoPorKM: 11 Peajes: 1) precision: precision.! !TestCase subclass: #DestinoNoEncontradoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DestinoNoEncontradoTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 16:26'!testAlumno01ViajeMasBaratoParaDestinoNoEncontradoLanzaError	| algoRemis  |	algoRemis := AlgoRemis new.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.self should: [algoRemis viajeMasBaratoParaDestino: 'Caballito Shopping'] raise: DestinoNoEncontrado.	! !TestCase subclass: #TarifaInicialNegativaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TarifaInicialNegativaTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 16:26'!testAlumno01RegistrarChoferTarifaInicialNegativaLanzaError	| algoRemis |	algoRemis := AlgoRemis new.self should: [algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: -500] raise: TarifaInicialNegativa .! !TestCase subclass: #ViajeTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!ViajeTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 14:08'!testAlumno02PrecioChoferElectrico5km1PeajeViajeHospitalCorrecto|algoRemis viaje chofer valorEsperado|algoRemis := AlgoRemis new.chofer := Chofer nuevoChoferAutoElectrico: 'Diego' conTarifaInicial: 500.viaje := Viaje nuevoViajeConDestinoHospital: 'Hospital Tokyo' aKms: 322  peajes: 10.viaje asignarChofer: chofer.valorEsperado := 0.2*(500 "tarifa inicial" + (322 "km" * 30 "precio/km")+ (10"peajes" * 50 "tarifa peaje")).self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!ViajeTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 14:07'!testAlumno01PrecioChoferNormal5km1PeajeViajeRegularCorrecto|algoRemis viaje chofer valorEsperado|algoRemis := AlgoRemis new.chofer := Chofer nuevoChoferAutoRegular: 'Diego' conTarifaInicial: 500.viaje := Viaje nuevoViajeConDestino: 'Tokyo' aKms: 322  peajes: 10.viaje asignarChofer: chofer.valorEsperado := 500 "tarifa inicial" + (322 "km" * 50 "precio/km")+ (10"peajes" * 100 "tarifa peaje").self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!ViajeTest methodsFor: 'tests' stamp: 'gonza 10/8/2021 14:00'!testAlumno03ObtieneDestinoCorrecto|viaje|viaje := Viaje nuevoViajeConDestino: 'Tokyo' aKms: 322  peajes: 10.self assert: (viaje obtenerDestino = 'Tokyo'). ! !